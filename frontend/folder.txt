mern-todo-nginx/
├── backend-auth/
│   ├── Dockerfile            # Dockerfile for Auth Service
│   ├── server.js             # Entry point for Auth Service (wires up routes + controllers)
│   ├── controllers/
│   │   └── authController.js # Controller functions (signup, login)
│   ├── routes/
│   │   └── auth.js           # Defines endpoints and calls controller functions
│   ├── models/
│   │   └── User.js           # Mongoose User schema
│   ├── package.json
│   └── .env                  # (Optional: service-specific env overrides)
│
├── backend-profile/
│   ├── Dockerfile               # Dockerfile for Profile Service
│   ├── server.js                # Entry point for Profile Service (wires up routes + controllers)
│   ├── controllers/
│   │   └── profileController.js # Controller functions (getProfile, updateProfile, etc.)
│   ├── routes/
│   │   └── profileRoutes.js     # Defines endpoints and calls controller functions
│   ├── models/
│   │   └── profile.js           # Mongoose Profile schema
│   ├── middleware/
│   │   └── authMiddleware.js    # Protect and decode JWT from incoming requests
│   ├── package.json
│   └── .env                     # (Optional: service-specific env overrides)
│
├── backend-todo/
│   ├── Dockerfile            # Dockerfile for Todo Service
│   ├── server.js             # Entry point for Todo Service (wires up routes + controllers)
│   ├── controllers/
│   │   └── todoController.js # Controller functions (getTodos, addTodo, updateTodo, deleteTodo)
│   ├── routes/
│   │   └── todos.js          # Defines endpoints and calls controller functions
│   ├── models/
│   │   └── Todo.js           # Mongoose Todo schema
│   ├── package.json
│   └── .env                  # (Optional: service-specific env overrides)
│
├── frontend/
│   ├── vite.config.js        # Vite configuration file
│   ├── Dockerfile            # Placeholder (build handled in project-root Dockerfile.nginx)
│   ├── package.json
│   ├── index.html            # Vite entry HTML
│   ├── src/                  # React + Vite source code
│   │   ├── main.jsx
│   │   ├── App.jsx
│   │   └── Components/
│   │       ├── Login.jsx
│   │       ├── Signup.jsx
│   │       └── Todos.jsx
│   └── dist/                 # Production build output (populated after `npm run build`)
│
├── nginx/
│   └── default.conf          # Nginx configuration to serve frontend and proxy APIs
│
└── docker-compose.yml        # Multi-service Docker orchestration (auth, profile, todo, nginx, etc.)




Below is a walkthrough of exactly what happens in each of your three “cases,” showing how NGINX’s location rules and your React Router work together. Throughout, remember:

NGINX only cares about the path prefixes you’ve defined (/api/auth/, /api/todos/, /api/profile/) and one catch‑all (/) that serves your index.html.

Anything that isn’t under /api/... gets routed to the React app, which then looks at window.location.pathname to decide which component to render.

Case 1: First hit on http://localhost/ (or /signup or /login manually)
1. You type http://localhost/ (no path)
NGINX sees the request path is /, which does not match any /api/... blocks.

It falls into the location / { … try_files $uri /index.html; } block.

It looks on disk for /usr/share/nginx/html/ + the requested URI (/).

There’s no file called /, so try_files falls back to serving index.html.

Browser receives index.html plus all your JS/CSS assets.

React boots up, runs your <App /> in App.jsx, checks token = localStorage.getItem('token').

If token is null, it renders the <Navigate to="/login" /> route.

If you did already have a token, it would redirect you to /todos.

2. You type http://localhost/signup or /login directly
Exactly the same as above: NGINX still serves the same index.html (because /signup is not an /api/... path and no static file /signup exists), and then React Router sees pathname === "/signup" (or "/login") and renders the corresponding <Signup /> or <Login /> component.

Key takeaway: NGINX never needs to know about your React‑side routes like /signup or /login. It only cares about “is it /api/... or not?” Anything else is handed off to your SPA.

Case 2: Hitting /signup → /login → calling /api/auth/*
User completes the signup form (on http://localhost/signup) and React does:

js
Copy
Edit
fetch('/api/auth/signup', {
  method: 'POST',
  body: JSON.stringify({ email, password }),
  headers: { 'Content-Type': 'application/json' }
})
NGINX sees the request path /api/auth/signup

Matches the location /api/auth/ { proxy_pass http://auth:5000; … } block.

Forwards the request internally to http://auth:5000/api/auth/signup.

Auth service (port 5000) handles signup, returns 201.

NGINX proxies that response back to the browser.

React upon success navigates to /login.

On the login form, React does:

js
Copy
Edit
fetch('/api/auth/login', { … })
NGINX again proxies /api/auth/login → auth:5000/api/auth/login.

Auth returns { token: "JWT..." }.

React stores that in localStorage, updates its state, then does navigate('/todos').

Meanwhile, when your <Todos /> mounts, it will do:

js
Copy
Edit
fetch('/api/todos/', {
  headers: { Authorization: `Bearer ${token}` }
})
NGINX sees /api/todos/ → proxies to http://todo:5001/api/todos/.

Todo service returns your list of todos → React displays them.

And similarly, your <Profile /> component will fetch('/api/profile/'), which NGINX forwards to profile:5002.

Case 3: Refreshing at http://localhost/todos
Say you’re on the Todos page and press your browser’s Refresh button. The URL in the address bar is still http://localhost/todos.

Browser issues GET /todos to NGINX.

NGINX checks location blocks:

It does not match /api/auth/, /api/todos/, or /api/profile/.

It falls back to location / { … try_files $uri /index.html; }.

try_files looks for a static file /usr/share/nginx/html/todos.

None exists, so it serves index.html again.

React boots from scratch and sees:

js
Copy
Edit
<Routes>
  … 
  <Route path="/todos" element={ token 
    ? <Todos/> 
    : <Navigate to="/login"/> } 
  />
  …
</Routes>
Because token is still in localStorage, it renders <Todos /> immediately and then in its useEffect it fetches /api/todos/ to repopulate the list.

Bottom line: your SPA handles any “deep‐link” or manual refresh on client routes by always falling back to index.html, and React Router kicks in on the client side.

Visual Summary
text
Copy
Edit
 +-----------+      HTTP(80)      +-----------+
 |  Browser  |  -------------->   |  NGINX    |
 | /todos    |                    |           |
 +-----------+                    |  location /api → proxy to services
                                  |  location /    → serve index.html
                                  +-----------+
                                           |
                                           v
                                     +-----------+
                                     | React SPA |   <-- sees /todos → renders Todos
                                     +-----------+
And for API calls:

text
Copy
Edit
 Browser fetch("/api/auth/login")
       │
       ▼
   NGINX: location /api/auth → proxy_pass http://auth:5000
       │
       ▼
  Auth service on 5000 → responds with JWT
       │
       ▼
   NGINX → proxies back to browser
       │
       ▼
 React stores token, navigates to /todos
Key Points to Remember
NGINX “splits” traffic roughly into two buckets:

API calls (/api/auth, /api/todos, /api/profile) → proxied to Node services on ports 5000–5002.

Everything else → serve the React app’s index.html so that client‑side routing can take over.

This pattern gives you clean URLs in your React app, while keeping your microservices hidden behind the same origin.

Manual refreshes or deep links (e.g. /signup, /todos, /profile) work because of that SPA fallback.

Hope that clears up exactly how NGINX and React together handle each of your three scenarios!
